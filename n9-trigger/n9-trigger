#!/usr/bin/python

import sys

from PySide import QtGui
from PySide import QtDeclarative
import os

# Comment the line below if you don't want to use OpenGL for QML rendering or if it is not supported
from PySide import QtOpenGL

#20:13:09:03:14:01
import dbus

class BTReader:
    def __init__(self):
        self.address = "20:13:09:03:14:01"
        self.service = "spp"
        self.bus = dbus.SystemBus()
        manager = dbus.Interface(self.bus.get_object("org.bluez", "/"), \
                                 "org.bluez.Manager")
        self.adapter = dbus.Interface(self.bus.get_object("org.bluez", manager.DefaultAdapter()), \
                                 "org.bluez.Adapter")
    
    def connect(self):
        path = self.adapter.FindDevice(self.address)
        object = self.bus.get_object("org.bluez", path)
        self.serial = dbus.Interface(object, \
                        "org.bluez.Serial")
        #properties = object.GetProperties()
        # Ensure device is trusted
        #if properties['Trusted'] != dbus.Boolean(1): sys.exit(1)
        self.node = self.serial.Connect(self.service)
        self.pipe = open(self.node, 'r+')
        return self.pipe
    
    def disconnect(self):
        self.serial.Disconnect(self.node)


def main():

    app = QtGui.QApplication(sys.argv)
    view = QtDeclarative.QDeclarativeView()

    # Comment the two lines below if you don't want to use OpenGL for QML rendering or if it is not supported
    glw = QtOpenGL.QGLWidget()
    view.setViewport(glw)

    if os.path.exists('/usr/share/n9-trigger/qml'):
        view.setSource('/usr/share/n9-trigger/qml/main.qml')
    else:
        view.setSource(os.path.join('qml','main.qml'))

    view.showFullScreen()
    app.exec_()

if __name__ == "__main__":
    main()
